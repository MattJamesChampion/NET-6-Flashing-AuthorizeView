@page "/"
@using System.Threading
@implements IDisposable

<style>
    table {
        width:25%;
        margin: 10px;
    }

    table, th, td {
        border: 1px solid black;
        border-collapse: collapse;
    }

    th, td {
        padding: 5px;
    }
</style>

<table>
    <thead>
        <tr>
            <th>Policy</th>
            <th>Authorized Text</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>None</td>
            <td>Example Text</td>
        </tr>
        <tr>
            <td>Instant</td>
            <AuthorizeView Policy="InstantPolicy">
                <Authorized>
                    <td>Example Text</td>
                </Authorized>
            </AuthorizeView>
        </tr>
        <tr>
            <td>Task.Delay(1)</td>
            <AuthorizeView Policy="TaskDelayPolicy">
                <Authorized>
                    <td>Example Text</td>
                </Authorized>
            </AuthorizeView>
        </tr>
    </tbody>
</table>

@code {
    public List<string> Messages = new();
    protected CancellationTokenSource TimerTokenSource;

    protected override async Task OnInitializedAsync()
    {
        TimerTokenSource = new CancellationTokenSource();
        StartTimerLoop(TimerTokenSource.Token);

        await base.OnInitializedAsync();
    }

    protected async void StartTimerLoop(CancellationToken ct)
    {
        try
        {
            while (true)
            {
                ct.ThrowIfCancellationRequested();

                StateHasChanged();

                await Task.Delay(500, ct);
            }
        }
        catch (OperationCanceledException)
        {
        }
        catch (Exception)
        {
        }
    }

    public void Dispose()
    {
        TimerTokenSource?.Cancel();
        TimerTokenSource?.Dispose();
    }
}
